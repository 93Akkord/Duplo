name: C/C++ CI - Windows

on:
  push:
    branches: [master]

  pull_request:
    branches: [master]

jobs:
  bump-tag-dry:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Get next version
      id: tag
      uses: anothrNick/github-tag-action@1.67.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: true
        DEFAULT_BUMP: patch
        DRY_RUN: true
    - name: create tag file
      run: |
        echo ${{ steps.tag.outputs.new_tag }} > tag.txt
    - name: upload new tag artifact
      uses: actions/upload-artifact@v1
      with:
        name: uploads
        path: tag.txt
  build-windows:
    runs-on: windows-latest
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [windows-latest]
        build_type: [Release]
        c_compiler: [cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
    needs: [bump-tag-dry]
    steps:
    - uses: actions/checkout@v4
    - name: download artifacts
      uses: actions/download-artifact@v1
      with:
        name: uploads
    - uses: actions/setup-node@v4
      with:
        node-version: 18
    - name: build
      run: |
        npm install -g bats
        $DUPLO_VERSION = Get-Content ./uploads/tag.txt
        mkdir build
        Set-Location build
        cmake .. -DDUPLO_VERSION="$DUPLO_VERSION" -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        cmake --build .  --config ${{ matrix.build_type }}
        Set-Location ..
        Compress-Archive -Path .\build\duplo\* -Destination duplo-windows.zip
    - name: upload windows artifact
      uses: actions/upload-artifact@v1
      with:
        name: uploads
        path: duplo-windows.zip
  upload-release:
    if: success()
    runs-on: ubuntu-latest
    needs: [build-windows]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: '0'
    - name: Bump version and push tag
      id: tag
      uses: anothrNick/github-tag-action@1.36.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: true
        DEFAULT_BUMP: patch
    - name: create release
      id: create_release
      uses: actions/create-release@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        release_name: Release ${{ steps.tag.outputs.tag }}
        draft: false
        prerelease: false
    - name: download artifacts
      uses: actions/download-artifact@v1
      with:
        name: uploads
    - name: upload windows
      id: upload-windows
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./uploads/duplo-windows.zip
        asset_name: duplo-windows.zip
        asset_content_type: application/zip
